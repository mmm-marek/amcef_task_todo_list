import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useState } from "react";
import { useMutation, useQuery, useQueryClient } from "react-query";
import {
    createNewTodoList,
    deleteTodoList,
    getTodoLists,
} from "../api/todoApi";

import { Modal } from "../components/common/Modal.component";
import {
    TodoListForm,
    TodoListFormValues,
} from "../components/forms/TodoListForm.component";
import { TodoListStack } from "../components/stack/TodoListsStack.component";

export default function Home() {
    const queryClient = useQueryClient();
    const { isLoading, isError, data } = useQuery("todoLists", getTodoLists);
    const router = useRouter();
    const [isModalOpened, setIsModalOpened] = useState(false);

    const createTodoListMutation = useMutation({
        mutationFn: createNewTodoList,
        onSuccess: (newTodoList) => {
            queryClient.setQueryData("todoLists", [
                ...(data ? data : []),
                newTodoList,
            ]);
        },
    });

    const deleteTodoListMutation = useMutation({
        mutationFn: deleteTodoList,
        onSuccess: (deletedTodoList) => {
            queryClient.setQueryData("todoLists", [
                ...(data ? data : []).filter(
                    (value) => value.id !== deletedTodoList.id
                ),
            ]);
        },
    });

    const onTodoListFormSubmit = (data: TodoListFormValues) => {
        createTodoListMutation.mutate(data);
        setIsModalOpened(false);
    };

    const handleDeleteTodoList = (todoListId: string) => {
        deleteTodoListMutation.mutate(todoListId);
    };

    const handleListClick = (todoListId: string) => {
        router.push(`./todolists/${todoListId}`);
    };
    return (
        <>
            <Head>
                <title>Amcef ToDo List</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/amcef_fav.webp" />
            </Head>
            <div className="flex justify-center items-center flex-col gap-2 w-screen h-screen bg-black">
                <div>
                    <Image
                        src="./amcef-logo.svg"
                        alt="logo"
                        width={295}
                        height={100}
                    />
                </div>
                {isLoading && <div>Loading...</div>}
                {isError && <div>Error occured</div>}
                <div className=" overflow-y-auto">
                    {data && (
                        <TodoListStack
                            todoLists={data}
                            onDeleteList={handleDeleteTodoList}
                            onListClick={handleListClick}
                        />
                    )}
                </div>

                <button
                    className="btn bg-amcef-primary hover:bg-amcef-primary-hover text-amcef-black"
                    onClick={() => setIsModalOpened(true)}
                >
                    Create New Todo List
                </button>

                <Modal
                    isOpen={isModalOpened}
                    onClose={() => {
                        setIsModalOpened(false);
                    }}
                >
                    <TodoListForm
                        formTitle="New Todo List"
                        inputPlaceholder="Type title..."
                        onSubmit={onTodoListFormSubmit}
                    />
                </Modal>
            </div>
        </>
    );
}
